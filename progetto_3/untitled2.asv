clearvars, close all
%discretizzazione alle differenze finite del BVP
% Ut-lapl(U(x,y)) = f(x,y,t), u = g sul bordo

%soluzione esatta del problema calcolata con separazione variabili
uex = @(x,y,t) exp(-(y.^2+x.^2)./(1+4.*t))./(sqrt(1+4.*t));
sorgente = @(x,y,t) (2*exp(-(y.^2+x.^2)./(1+4.*t)))./(1+4.*t).^(3/2); % sorgente

a = 0; b = 1;
n = 10;
n2 = n^2;
nint = (n-2)^2;
dim = (n-2)^2; %nr nodi incogniti totali
h = (b-a)/n;
dt = 1e-8;

mu = dt/(h^2);


%BCs
% gO = @(x,y,t)exp(-(x.^2+0*y.^2)./(1+4.*t))/(sqrt(1+4.*t));
% gE = @(x,y,t)exp(-(x.^2+1)./(1+4.*t))/(sqrt(1+4.*t));
% gN = @(x,y,t)exp(-(0*x.^2+y.^2)./(1+4.*t))/(sqrt(1+4.*t));
% gS = @(x,y,t)exp(-(1+y.^2)./(1+4.*t))/(sqrt(1+4.*t));

gS = @(x,y,t)exp(-(x.^2+0*y.^2)./(1+4.*t))/(sqrt(1+4.*t));
gN = @(x,y,t)exp(-(x.^2+1)./(1+4.*t))/(sqrt(1+4.*t));
gO = @(x,y,t)exp(-(0*x.^2+y.^2)./(1+4.*t))/(sqrt(1+4.*t)); 
gE = @(x,y,t)exp(-(1+y.^2)./(1+4.*t))/(sqrt(1+4.*t)); 

%matrice u_k delle condizioni iniziali
u_k = zeros(n);

x = linspace(h,1-h,n-2);
y = linspace(h,1-h,n-2);    
[X,Y] = meshgrid(x,y);  %griglia punti interni

z = linspace(0,1,n);    
w = linspace(0,1,n);
[Z,W] = meshgrid(z,w);  %griglia completa


uex0 = @(x,y) uex(x,y,0); %sol esatta a t=0
u_kv = reshape(uex0(X,Y)',[],1); % scorro le cond iniz. per righe



blockA = diag((1+2*mu)*ones(1,n-2)) + diag(-mu*ones(1,n-3),-1) + diag(-mu*ones(1,n-3),1);
Ac = repmat({blockA}, 1, n-2);  
A = blkdiag(Ac{:}); %creo A a blocchi


B = diag((1-2*mu)*ones(1,(n-2)^2)) + diag(mu*ones(1,nint-3),-3) + diag(mu*ones(1,nint-3),3);



for k = 1:10
    %calcolo f(k+1/2)
    
    f = @(x,y) sorgente(x,y,k+1/2); %f al tempo k+1/2
    fv = reshape(f(X,Y)',[],1); %valuto f sui punti interni, scorro f per righe
    
    
    %% BCs 1
    north = gN(Z(2,2:n-1),1,k+1/2);
    north(1) = north(1) + gE(Z(2),W(1),k+1/2);
    north(end) = north(end) + gE(Z(2),W(n),k+1/2);
    
    if n > 4
        for i = 1:n-4
            r(:,i) = [gO(Z(1), W(i+1), k+1/2); zeros(n-4,1); gE(Z(n), W(i+1), k+1/2)];
        end
    else
        r = 0;
    end
    
    south = gS(Z(1,2:n-1),0,k+1/2);
    south(1) = south(1) + gE(Z(n-1),W(1),k+1/2);
    south(end) = south(end) + gE(Z(n-1),W(n),k+1/2);
    
    bcs1 = [north'; reshape(r,[],1); south'];
    
    %% BCs2
    east = gE(1,W(1,2:n-1),k+1);
    east(1) = east(1) + gN(Z(n-1),W(1),k+1);
    east(end) = east(end) + gS(Z(n-1),W(n),k+1);
    
    if n > 4
        for i = 1:n-4
            r(:,i) = [gN(Z(i+1), W(1), k+1); zeros(n-4,1); gS(Z(i+1), W(n), k+1)];
        end
    else
        r = 0;
    end
    
    west = gO(0,W(n,2:n-1),k+1);
    west(1) = west(1) + gN(Z(2),W(1),k+1);
    west(end) = west(end) + gS(Z(2),W(n),k+1);
    
    
    bcs2 = [west'; reshape(r,[],1); east'];
    
   
    %%
    b = B*u_kv + mu*bcs1 - 1/2*fv;    %eq 1
    u_half = thomas(A,b);
    
    u_halfm = reshape(u_half, n-2, n-2); %rifaccio la matrice
    u_half = reshape(u_halfm', [], 1); % per poi scorrere per colonne
    
    fm = reshape(fv, n-2, n-2);
    fv = reshape(fm', [], 1);
    
    b = B*u_half + mu*bcs2 - 1/2*fv;  %eq 2
    u_new = thomas(A,b);

    u_k = reshape(u_new, n-2, n-2); %copio u_k+1 in u+k per il prossimo giro, lo scrivo come matrice
    u_kv = reshape(u_k', [], 1);    %scorro per righe

end

%u_k = reshape(u_kv,n-2,n-2)
% u_k
% 

Uex = uex(Z,W,k); %calcolo la sol esatta sulla griglia

u_full = zeros(n);  %creo una matrice per la sol approssimata su tutta la griglia
l = 1;
for i = 2:n-1
    for j = 2: n-1
        u_full(i,j) = u_kv(l);  %inserisco i punti interni
        l=l+1;
    end
end

u_full(1,:) = gN(z,1,k+1);  %inse i bordi
u_full(n,:) = gS(z,0,k+1);
u_full(:,1) = gO(0,w,k+1)';
u_full(:,n) = gE(1,w,k+1)';


err = norm(reshape(u_full,[],1) - reshape(Uex,[],1),inf)

surf(Z,W,u_full); 

figure, surf(Z,W,uex(Z,W,k));

%figure, surf(X,Y,u_k-1)



